import uuid

from django import forms

from .widgets import MultiUploaderIframeWidget


class MultiUploaderField(forms.MultiValueField):
    """
    Contains a charfield with an autogenerated uuid and a
    ModelMultipleChoiceField.
    """
    def __init__(self, queryset=None, initial=None, *args, **kwargs):
        self.queryset = queryset
        fields = (
            forms.CharField(),
            forms.ModelMultipleChoiceField(queryset=queryset)
        )
        super(MultiUploaderField, self).__init__(fields, initial=initial,
                                                 *args, **kwargs)
        # We need to dynamically instantiate the widget with our uid.  The
        # widget will rely on this uid when the parent form gets passed an
        # initial value only containing the pk_list (by, say, a model form).
        self.widget = MultiUploaderIframeWidget(uid=self.uid)

    def compress(self, data_list):
        """
        Takes data_list of form [uuid, [<pk list>]] and returns just the pk
        list
        """
        if data_list:
            return data_list[1]
        return None

    @property
    def uid(self):
        """
        Generate a uuid and store it on the instance
        """
        if not getattr(self, '_uid', None):
            self._uid = uuid.uuid4().hex
        return self._uid

    @uid.setter
    def uid(self, value):
        self._uid = value

    @property
    def initial(self):
        return self._initial

    @initial.setter
    def initial(self, value):
        """
        Ensure self.initial is of the format: [uid, pk_list]
        (it will typically be passed a python list of pks, and we need to add
        the uuid)
        """
        if value is None:
            self._initial = [self.uid, []]
        elif isinstance(value, (list, tuple)):
            self._initial = [self.uid, value]
